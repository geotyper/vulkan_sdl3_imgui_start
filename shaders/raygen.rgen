#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : require

#include "../src/shared_with_shaders.h"

layout(set = SWS_SCENE_AS_SET, binding = SWS_SCENE_AS_BINDING)
uniform accelerationStructureEXT topLevelAS;

layout(set = SWS_RESULT_IMAGE_SET, binding = SWS_RESULT_IMAGE_BINDING, rgba8)
uniform image2D accumImage;

layout(set = SWS_CAMERA_SET, binding = SWS_CAMERA_BINDING)
uniform CameraUBO {
    mat4 invView;
    mat4 invProj;
} cam;

layout(location = SWS_LOC_PRIMARY_RAY) rayPayloadEXT RadiancePayload prd;

void main() {
    uvec2 launchID = gl_LaunchIDEXT.xy;
    uvec2 launchSize = gl_LaunchSizeEXT.xy;

    vec2 uv = (vec2(launchID) + 0.5) / vec2(launchSize);
    vec2 ndc = uv * 2.0 - 1.0;

    vec4 origin = cam.invView * vec4(0, 0, 0, 1);
    vec4 target = cam.invProj * vec4(ndc, 1.0, 1.0);
    target /= target.w;
    vec4 worldDir = cam.invView * vec4(normalize(target.xyz), 0.0);

    // начальные значения
    prd.color = vec3(1.0, 0.0, 1.0); // Ярко-розовый, чтобы точно увидеть
    prd.depth = 0;

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        SWS_LOC_PRIMARY_RAY,
        SWS_NUM_GROUPS,
        SWS_LOC_PRIMARY_RAY,
        origin.xyz,
        0.001,
        worldDir.xyz,
        1000.0,
        0
    );

    imageStore(accumImage, ivec2(launchID), vec4(prd.color, 1.0));
}

