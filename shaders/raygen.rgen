#version 460 core
#extension GL_EXT_ray_tracing : enable
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_nonuniform_qualifier : require

#include "../src/shared_with_shaders.h"

layout(set = SWS_SCENE_AS_SET, binding = SWS_SCENE_AS_BINDING) uniform accelerationStructureEXT topLevelAS;
layout(set = SWS_RESULT_IMAGE_SET, binding = SWS_RESULT_IMAGE_BINDING, rgba8) uniform image2D accumImage;
layout(set = SWS_CAMERA_SET, binding = SWS_CAMERA_BINDING) uniform CameraUBO { mat4 invView; mat4 invProj; } cam;

// 2) Then bind it as your payload:
layout(location = SWS_LOC_PRIMARY_RAY) rayPayloadEXT RadiancePayload prd;


void main() {
    vec2 pix = vec2(gl_LaunchIDEXT.xy) + 0.5;
    vec2 res = vec2(gl_LaunchSizeEXT.xy);
    vec2 ndc = pix / res * 2.0 - 1.0;

    vec3 origin = (cam.invView * vec4(0,0,0,1)).xyz;
    vec3 dir    = normalize((cam.invProj * vec4(ndc,1,1)).xyz);
    dir         = normalize((cam.invView * vec4(dir,0)).xyz);
    
    prd.depth = 0;

    traceRayEXT(
        topLevelAS,
        gl_RayFlagsOpaqueEXT,
        0xFF,
        /*sbtOffset*/       0, /*sbtStride*/1,
        /*missIndex*/       SWS_PRIMARY_MISS_SHADERS_IDX,
        origin, 0.001,
        dir,    1e30,
        /*payloadLoc*/      SWS_LOC_PRIMARY_RAY
    );

    imageStore(accumImage, ivec2(gl_LaunchIDEXT.xy), vec4(prd.color,1.0));
}

